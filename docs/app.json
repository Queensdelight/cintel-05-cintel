[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top\n# --------------------------------------------\n\nfrom shiny import App, render, ui, reactive\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom shinywidgets import render_widget, output_widget\nfrom scipy import stats\n\n# --------------------------------------------\n# Import icons as you like\n# --------------------------------------------\n\nfrom faicons import icon_svg  \n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int  = 3\n\n# --------------------------------------------\n# Initialize a REACTIVE VALUE with a common data structure \n# Used by all the live data components\n# This reactive value is a wrapper around a DEQUE of readings\n# --------------------------------------------\n\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic \n    temp = round(random.uniform(-18, -16), 2)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n    \n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # Processing: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # Processing: Get the latest entry \n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need \n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# --------------------------------------------\n# Shiny Core\n# Define the Shiny UI layout\n# --------------------------------------------\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.h2(\"Antarctic Explorer\", class_=\"text-center\"),\n            ui.p(\"A demonstration of real-time temperature readings in Antarctica.\", class_=\"text-center\"),\n        ),\n        ui.panel_main(\n          ui.value_box(\n            \"Real Temp\",\n            ui.output_text(\"display_temp\"),\n            \"Warmer than usual\",\n            showcase=piggy_bank,\n            theme=\"bg-gradient-indigo-purple\",\n              full_screen=False,\n          ),\n          ui.value_box(\n            \"Real Time\",\n            ui.output_text(\"display_time\"),\n            \"Daylight Savings Time\",\n            showcase=piggy_bank,\n            theme=\"bg-gradient-indigo-purple\",\n            full_screen=False,\n          ),\n          ui.output_data_frame(\"display_df\"),\n          output_widget(\"display_plot\"),\n        )\n    )\n)\n\n# --------------------------------------------\n# Shiny Core\u00c2\u00a0\n# Define the server logic to render the UI components based on reactive values\n# ---------------------------------------------\n\ndef server(input, output, session):\n\n  # --------------\n  # Define a function to render.text with the TEMP\n  # With Core, we must add this function to the app_ui\n  # by calling ui.output_text()\n  # And passing in whatever we name this function as a string\n  # --------------\n  @render.text\n  def display_temp():\n    ''' Get the latest reading and return a temperature string'''\n    deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['temp']}\u00c2\u00b0C\"\n\n  # --------------\n  # Define a function to render.text with the TIME\n  # With Core, we must add this function to the app_ui\n  # by calling ui.output_text()\n  # And passing in whatever we name this function as a string\n  # --------------\n  @render.text\n  def display_time():\n    ''' Get the latest reading and return a timestamp string'''\n    deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['timestamp']}\"\n  \n  # --------------\n  # Define a function to render.data_frame with our DF\n  # With Core, we must add this function to the app_ui\n  # by calling ui.output_data_frame()\n  # And passing in whatever we name this function as a string\n  # --------------\n  @render.data_frame\n  def display_df():\n    ''' Get the latest reading and return a dataframe with current readings'''\n    deque_snapshot, df, latest_dictionary_entry =  reactive_calc_combined()\n    return df\n\n  # --------------\n  # Define a function to render_widget with a PLOT\n  # With Core, we must add this function to the app_ui\n  # by calling output_widget() - NOT ui.output_widget - \n  # And passing in whatever we name this function as a string\n  # --------------\n\n  @render_widget\n  def display_plot():\n    # Fetch from the reactive calc function\n    deque_snapshot, df, latest_dictionary_entry =  reactive_calc_combined()\n\n    # Ensure the DataFrame is not empty before plotting\n    if not df.empty:\n        # Convert the 'timestamp' column to datetime for better plotting\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n\n        # Create scatter plot for readings\n        fig = go.Figure()\n        fig.add_trace(\n           go.Scatter(\n              x=df['timestamp'], \n              y=df['temp'],\n              mode='markers',\n              name='Temperature Readings',\n              marker=dict(size=10, color='blue') \n            )\n        )\n\n        # Linear regression - we need to get a list of the\n        # Independent variable x values (time) and the\n        # Dependent variable y values (temp)\n        # then, it's pretty easy using scipy.stats.linregress()\n\n        # For x let's generate a sequence of integers from 0 to len(df)\n        sequence = range(len(df))\n        x_vals = list(sequence)\n        y_vals = df['temp']\n\n        slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n        best_fit_line = [slope * x + intercept for x in x_vals]\n\n        fig.add_trace(go.Scatter(\n           x=df['timestamp'], \n           y=best_fit_line,\n           mode='lines',\n           name='Regression Line'))\n\n        # Update layout with a dynamic x-axis range to create the scrolling effect\n        # Set the window size to display in the plot. Adjust 'window_size' as needed.\n        window_size = 5  # Example: last N entries\n        if len(df) > window_size:\n            # Set the range to the last 'window_size' timestamps\n            window_start = df['timestamp'].iloc[-window_size]\n            window_end = df['timestamp'].iloc[-1]\n            fig.update_xaxes(range=[window_start, window_end])\n\n        fig.update_layout(title='Temperature Readings with Regression Line',\n                          xaxis_title='Time',\n                          yaxis_title='Temperature (\u00c2\u00b0C)')\n\n        return fig\n\n# --------------------------------------------\n# Create and run the PyShiny app\n# --------------------------------------------\napp = App(app_ui, server)\n", "type": "text"}]